<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/css/materialdesignicons.css" integrity="sha256-NAxhqDvtY0l4xn+YVa6WjAcmd94NNfttjNsDmNatFVc=" crossorigin="anonymous" />
<section id="wine-section" class="section-wine">
    <div class="container-wine">
        <!-- Recherche et filtres -->
        <div class="justify-content-center row">
            <div class="col-lg-12">
                <div class="wine-list-widgets mb-4">
                    <form action="#" class="">
                        <div class="g-2 row">
                            <div class="col-lg-3">
                                <div class="wine-filter-form">
                                    <i class="uil uil-briefcase-alt"></i>
                                    <input id="wineSearchInput" placeholder="Nom du domaine, Appellation..." type="search" class="form-control wine-input-box form-control" />
                                </div>
                            </div>
                            <div class="col-lg-3">
                                <div class="wine-filter-form">
                                    <i class="uil uil-map-marker"></i>
                                    <select class="form-select selectForm__inner" id="regionSelect" aria-label="Filtrer par région">
                                        <option value="Toutes les regions">Toutes les regions</option>
                                        {% set displayedRegions = [] %}

                                        {% for winesListElem in winesList %}
                                            {% if winesListElem.region not in displayedRegions %}
                                                <option value="{{ winesListElem.region }}">{{ winesListElem.region }}</option>
                                                {% set displayedRegions = displayedRegions | merge([winesListElem.region]) %}
                                            {% endif %}
                                        {% endfor %}

                                    </select>
                                </div>
                            </div>
                            <div class="col-lg-3">
                                <div class="wine-filter-form">
                                    <i class="uil uil-clipboard-notes"></i>
                                    <select class="form-select selectForm__inner" id="typeSelect" aria-label="Filtrer par type">
                                    <option value="Tous les types">Tous les types</option>
                                    {% set displayedType = [] %}

                                    {% for winesListElem in winesList %}
                                        {% if winesListElem.wine_type not in displayedType %}
                                            <option value="{{ winesListElem.wine_type }}">{{ winesListElem.wine_type }}</option>
                                            {% set displayedType = displayedType | merge([winesListElem.wine_type]) %}
                                        {% endif %}
                                    {% endfor %}
                                    </select>
                                </div>
                            </div>
                            <div class="col-lg-3">
                                <div>

                                    <button class="btn btn-primary" type="button" onclick="filterResults()" ><i class="uil uil-filter"></i> 
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"/>
                                    </svg> Filtrer</button>

                                    
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <!-- Liste des vins -->
        <div class="row-wine">
            <div class="col-lg-12">
                <div class="wine-list">
                    <!-- Exemple de vin -->


                     {% for winesListElem in winesList %}

                        {% include 'wineListElem.twig' %}

                     {% endfor %}
                    <!-- Fin Exemple de vin -->
                </div>
            </div>
        </div>
        <!-- Pagination -->
        <div class="row">
            <div class="mt-4 pt-2 col-lg-12">
                <nav aria-label="Page navigation example">
                    <div class="pagination wine-pagination mb-0 justify-content-center">
                        <li class="page-item disabled">
                            <a class="page-link" tabindex="-1" href="#"><i class="mdi mdi-chevron-double-left fs-15"></i></a>
                        </li>
                        <li class="page-item active"><a class="page-link" href="#">1</a></li>
                        <li class="page-item"><a class="page-link" href="#">2</a></li>
                        <li class="page-item">
                            <a class="page-link" href="#"><i class="mdi mdi-chevron-double-right fs-15"></i></a>
                        </li>
                    </div>
                </nav>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const searchInput = document.getElementById("wineSearchInput");
            const regionSelect = document.getElementById("regionSelect");
            const typeSelect = document.getElementById("typeSelect");
            const wineItems = document.querySelectorAll(".wine-item");

            function updateDropdowns() {
                // Collect all visible wines
                const visibleWineItems = Array.from(wineItems).filter(item => item.style.display !== "none");

                // Count occurrences of regions and types
                const regionCounts = {};
                const typeCounts = {};

                visibleWineItems.forEach(item => {
                    const region = item.getAttribute("data-region");
                    const type = item.getAttribute("data-type");

                    if (region) regionCounts[region] = (regionCounts[region] || 0) + 1;
                    if (type) typeCounts[type] = (typeCounts[type] || 0) + 1;
                });

                // Preserve current selections
                const currentRegion = regionSelect.value;
                const currentType = typeSelect.value;

                // Sort and update region dropdown
                const sortedRegions = Object.keys(regionCounts).sort();
                regionSelect.innerHTML = `<option value="Toutes les regions">Toutes les régions</option>`;
                sortedRegions.forEach(region => {
                    const isSelected = region === currentRegion ? "selected" : "";
                    regionSelect.innerHTML += `<option value="${region}" ${isSelected}>${region} (${regionCounts[region]})</option>`;
                });

                // Sort and update type dropdown
                const sortedTypes = Object.keys(typeCounts).sort();
                typeSelect.innerHTML = `<option value="Tous les types">Tous les types</option>`;
                sortedTypes.forEach(type => {
                    const isSelected = type === currentType ? "selected" : "";
                    typeSelect.innerHTML += `<option value="${type}" ${isSelected}>${type} (${typeCounts[type]})</option>`;
                });
            }

            function filterWines() {
                const searchQuery = searchInput.value.toLowerCase();
                const selectedRegion = regionSelect.value;
                const selectedType = typeSelect.value;

                wineItems.forEach(item => {
                    const appellation = item.getAttribute("data-appellation").toLowerCase();
                    const name = item.getAttribute("data-name").toLowerCase();
                    const region = item.getAttribute("data-region");
                    const type = item.getAttribute("data-type");

                    const matchesSearch = name.includes(searchQuery) || appellation.includes(searchQuery);
                    const matchesRegion = selectedRegion === "Toutes les regions" || region === selectedRegion;
                    const matchesType = selectedType === "Tous les types" || type === selectedType;

                    if (matchesSearch && matchesRegion && matchesType) {
                        item.style.display = "";
                    } else {
                        item.style.display = "none";
                    }
                });

                // Update dropdowns after filtering
                updateDropdowns();
            }

            // Attach event listeners
            searchInput.addEventListener("input", filterWines);
            regionSelect.addEventListener("change", filterWines);
            typeSelect.addEventListener("change", filterWines);

            // Initialize dropdowns on page load
            updateDropdowns();
        });


        // ------------- Pagination ----------------
        document.addEventListener("DOMContentLoaded", function () {
            const wineItems = document.querySelectorAll(".wine-item");
            const itemsPerPage = 5;
            let currentPage = 1;
            const paginationContainer = document.querySelector(".wine-pagination");

            function showPage(page) {
                const start = (page - 1) * itemsPerPage;
                const end = start + itemsPerPage;

                wineItems.forEach((item, index) => {
                    item.style.display = index >= start && index < end ? "" : "none";
                });
            }

            function createPagination() {
                paginationContainer.innerHTML = "";
                const totalPages = Math.ceil(wineItems.length / itemsPerPage);

                if (totalPages > 1) {
                    const prev = document.createElement("li");
                    prev.classList.add("page-item");
                    prev.innerHTML = `<a class="page-link" href="#">&laquo;</a>`;
                    prev.onclick = () => changePage(currentPage - 1);
                    if (currentPage === 1) prev.classList.add("disabled");
                    paginationContainer.appendChild(prev);

                    for (let i = 1; i <= totalPages; i++) {
                        const pageItem = document.createElement("li");
                        pageItem.classList.add("page-item");
                        if (i === currentPage) pageItem.classList.add("active");
                        pageItem.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                        pageItem.onclick = () => changePage(i);
                        paginationContainer.appendChild(pageItem);
                    }

                    const next = document.createElement("li");
                    next.classList.add("page-item");
                    next.innerHTML = `<a class="page-link" href="#">&raquo;</a>`;
                    next.onclick = () => changePage(currentPage + 1);
                    if (currentPage === totalPages) next.classList.add("disabled");
                    paginationContainer.appendChild(next);
                }
            }

            function changePage(page) {
                const totalPages = Math.ceil(wineItems.length / itemsPerPage);
                if (page < 1 || page > totalPages) return;
                currentPage = page;
                showPage(currentPage);
                createPagination();
            }

            showPage(currentPage);
            createPagination();
        });




    </script>
</section>
